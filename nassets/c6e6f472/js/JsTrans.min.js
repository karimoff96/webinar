if (typeof Yii == "undefined") {
  var Yii = {};
}
Yii.translate = {
  FLUSH_BUFFER_DELAY: 3000,
  FLUSH_BUFFER_MAX_TIMES: 5,
  BUFFER_LIMIT: 50,
  dictionary: {},
  dbDictionary: {},
  config: { language: "", dbTranslationEnabled: false, addNewEnabled: false },
  buffer: {},
  timerId: null,
  bufferFlushTimes: 0,
};
Yii.translate.postprocess = function (translation, params, language) {
  if (typeof params == "undefined") {
    params = 0;
  }
  var num = 0;
  if (params % 1 === 0) {
    params = { n: params };
  }
  if (params.n % 1 === 0) {
    num = params.n;
  }
  var chunks = translation.split("|");
  var origStr = translation;
  if (translation.indexOf("#") !== -1) {
    for (var i = 0; i < chunks.length; i++) {
      var pieces = chunks[i].split("#"),
        ex = pieces[0],
        msg = pieces[1];
      if (pieces.length == 2) {
        if (ex % 1 === 0) {
          ex = "n==" + ex;
        }
        var eval_expr = ex.split("n").join(num);
        try {
          if (eval(eval_expr)) {
            translation = msg;
            break;
          }
        } catch (e) {}
      }
    }
  } else {
    if (chunks.length > 1) {
      if (language === "ru" && chunks.length === 3) {
        var n100 = num % 100;
        var n10 = num % 10;
        if ((n100 >= 11 && n100 <= 14) || n10 >= 5 || n10 === 0) {
          translation = chunks[2];
        } else {
          if (n10 === 1) {
            translation = chunks[0];
          } else {
            translation = chunks[1];
          }
        }
      } else {
        translation = num == 1 ? chunks[0] : chunks[1];
      }
    }
  }
  var matches;
  if (
    chunks.length > 1 &&
    (matches = origStr.match(/ :\d+$/)) &&
    !translation.match(/ :\d+$/)
  ) {
    translation += matches[0];
  }
  if (typeof (params == "Object")) {
    for (var key in params) {
      translation = translation.split("{" + key + "}").join(params[key]);
    }
  }
  return translation;
};
Yii.translate.findDictionary = function (a, c, b) {
  var d = null;
  if (typeof a[c] !== "undefined" && b && typeof a[c][b] !== "undefined") {
    d = a[c][b];
  }
  return d;
};
Yii.translate.handleNewDbTranslationKey = function (b, a) {
  if (!Yii.translate.config.addNewEnabled) {
    return;
  }
  if (Object.keys(Yii.translate.buffer).length < Yii.translate.BUFFER_LIMIT) {
    Yii.translate.buffer[b + a] = { category: b, message: a };
    if (!Yii.translate.timerId) {
      Yii.translate.timerId = setTimeout(function () {
        Yii.translate.timerId = null;
        Yii.translate.flushBuffer();
      }, Yii.translate.FLUSH_BUFFER_DELAY);
    }
  }
};
Yii.translate.flushBuffer = function () {
  if (Yii.translate.bufferFlushTimes >= Yii.translate.FLUSH_BUFFER_MAX_TIMES) {
    return;
  }
  try {
    var b = new XMLHttpRequest();
    b.open("POST", "/pl/cms/control/translation/add-translation-keys", true);
    b.setRequestHeader("Content-Type", "application/json");
    b.send(JSON.stringify({ rows: Yii.translate.buffer }));
    Yii.translate.buffer = {};
    Yii.translate.bufferFlushTimes++;
  } catch (a) {
    console.log(a);
  }
};
Yii.t = function (b, j, d, f) {
  try {
    var c = f ? f : Yii.translate.config.language,
      i = null,
      g = null;
    i = Yii.translate.findDictionary(Yii.translate.dictionary, c, b);
    var a = false;
    if (Yii.translate.config.dbTranslationEnabled) {
      g = Yii.translate.findDictionary(Yii.translate.dbDictionary, c, b);
      if (g && Object.keys(g).length > 0 && typeof g[j] !== "undefined") {
        a = g[j];
      } else {
        Yii.translate.handleNewDbTranslationKey(b, j);
      }
    }
    if (!a) {
      a =
        i && Object.keys(i).length > 0 && typeof i[j] !== "undefined"
          ? i[j]
          : Yii.translate.escapeHtml(j);
    }
    return Yii.translate.postprocess(a, d, c);
  } catch (h) {
    console.log(h);
  }
  return j;
};
Yii.translate.escapeHtml = function (a) {
  return a
    .replace(/&/g, "&amp;")
    .replace(/</g, "&lt;")
    .replace(/>/g, "&gt;")
    .replace(/"/g, "&quot;")
    .replace(/'/g, "&#039;");
};
